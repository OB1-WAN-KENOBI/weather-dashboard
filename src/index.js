import "./styles.css";

class WeatherDashboard {
  constructor() {
    this.apiKey = process.env.WEATHER_API_KEY;
    this.baseUrl = "https://api.openweathermap.org/data/2.5";
    this.currentUnit = "celsius";
    this.currentData = null;
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API –∫–ª—é—á –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è placeholder
    this.isDemoMode =
      !this.apiKey ||
      this.apiKey === "your_api_key_here" ||
      this.apiKey === "your_actual_api_key_here" ||
      this.apiKey.length < 10;

    this.initializeElements();
    this.bindEvents();
    this.loadFromLocalStorage();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    this.checkApiKey();
  }

  async checkApiKey() {
    if (this.isDemoMode) {
      console.log(
        "üå§Ô∏è Weather Dashboard –∑–∞–ø—É—â–µ–Ω –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ. –î–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á OpenWeatherMap."
      );
      return;
    }

    try {
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º API –∫–ª—é—á —Å –ø—Ä–æ—Å—Ç—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
      const response = await fetch(
        `https://api.openweathermap.org/data/2.5/weather?q=London&appid=${this.apiKey}&units=metric`
      );
      if (!response.ok) {
        throw new Error("API key not working");
      }
      console.log("‚úÖ API –∫–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
    } catch (error) {
      console.log("üå§Ô∏è API –∫–ª—é—á –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º");
      this.isDemoMode = true;
    }
  }

  initializeElements() {
    // Input elements
    this.cityInput = document.getElementById("cityInput");
    this.searchBtn = document.getElementById("searchBtn");
    this.locationBtn = document.getElementById("locationBtn");
    this.celsiusBtn = document.getElementById("celsiusBtn");
    this.fahrenheitBtn = document.getElementById("fahrenheitBtn");

    // Display elements
    this.loading = document.getElementById("loading");
    this.error = document.getElementById("error");
    this.errorMessage = document.getElementById("errorMessage");
    this.retryBtn = document.getElementById("retryBtn");
    this.weatherContainer = document.getElementById("weatherContainer");
    this.welcome = document.getElementById("welcome");

    // Weather data elements
    this.cityName = document.getElementById("cityName");
    this.currentDate = document.getElementById("currentDate");
    this.currentIcon = document.getElementById("currentIcon");
    this.currentTemp = document.getElementById("currentTemp");
    this.weatherDescription = document.getElementById("weatherDescription");
    this.feelsLike = document.getElementById("feelsLike");
    this.humidity = document.getElementById("humidity");
    this.windSpeed = document.getElementById("windSpeed");
    this.pressure = document.getElementById("pressure");
    this.forecastContainer = document.getElementById("forecastContainer");
  }

  bindEvents() {
    // Search functionality
    this.searchBtn.addEventListener("click", () => this.searchWeather());
    this.cityInput.addEventListener("keypress", (e) => {
      if (e.key === "Enter") this.searchWeather();
    });

    // Location functionality
    this.locationBtn.addEventListener("click", () => this.getLocationWeather());

    // Unit toggle
    this.celsiusBtn.addEventListener("click", () => this.setUnit("celsius"));
    this.fahrenheitBtn.addEventListener("click", () =>
      this.setUnit("fahrenheit")
    );

    // Retry functionality
    this.retryBtn.addEventListener("click", () => this.retryLastSearch());

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
    const manualCityBtn = document.getElementById("manualCityBtn");
    if (manualCityBtn) {
      manualCityBtn.addEventListener("click", () => {
        this.hideAllStates();
        this.welcome.classList.remove("hidden");
        this.cityInput.focus();
      });
    }
  }

  async searchWeather() {
    const city = this.cityInput.value.trim();
    if (!city) {
      this.showError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞");
      return;
    }

    this.showLoading();

    if (this.isDemoMode) {
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É API
      await new Promise((resolve) => setTimeout(resolve, 1000));
      try {
        const weatherData = this.getMockWeatherData(city);
        this.displayWeather(weatherData);
        this.saveToLocalStorage(city);
      } catch (error) {
        this.handleError(error);
      }
      return;
    }

    try {
      const weatherData = await this.fetchWeatherData(city);
      this.displayWeather(weatherData);
      this.saveToLocalStorage(city);
    } catch (error) {
      // –ï—Å–ª–∏ API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º
      if (
        error.message.includes("401") ||
        error.message.includes("Unauthorized") ||
        error.message.includes("API key not working")
      ) {
        this.isDemoMode = true;
        console.log(
          "üå§Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º –∏–∑-–∑–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ API –∫–ª—é—á–∞."
        );
        // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–∏—Å–∫ –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ
        const weatherData = this.getMockWeatherData(city);
        this.displayWeather(weatherData);
        this.saveToLocalStorage(city);
        return;
      }
      this.handleError(error);
    }
  }

  async getLocationWeather() {
    if (!navigator.geolocation) {
      this.showError("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º");
      return;
    }

    this.showLoading();

    if (this.isDemoMode) {
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É API
      await new Promise((resolve) => setTimeout(resolve, 1000));
      try {
        const weatherData = this.getMockWeatherData("–í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ");
        this.displayWeather(weatherData);
      } catch (error) {
        this.handleError(error);
      }
      return;
    }

    try {
      const position = await this.getCurrentPosition();
      const { latitude, longitude } = position.coords;
      const weatherData = await this.fetchWeatherDataByCoords(
        latitude,
        longitude
      );
      this.displayWeather(weatherData);
    } catch (error) {
      // –ï—Å–ª–∏ API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º
      if (
        error.message.includes("401") ||
        error.message.includes("Unauthorized") ||
        error.message.includes("API key not working")
      ) {
        this.isDemoMode = true;
        console.log(
          "üå§Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º –∏–∑-–∑–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ API –∫–ª—é—á–∞."
        );
        // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–∏—Å–∫ –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ
        const weatherData = this.getMockWeatherData("–í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ");
        this.displayWeather(weatherData);
        return;
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
      if (error.name === "GeolocationPositionError") {
        this.handleError(error);
        return;
      }

      this.handleError(error);
    }
  }

  getCurrentPosition() {
    return new Promise((resolve, reject) => {
      console.log("üìç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ...");

      if (!navigator.geolocation) {
        console.log("‚ùå –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ");
        reject(new Error("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"));
        return;
      }

      // –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ —Å –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
      const tryGeolocation = (options) => {
        navigator.geolocation.getCurrentPosition(
          (position) => {
            console.log("‚úÖ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ:", {
              latitude: position.coords.latitude,
              longitude: position.coords.longitude,
              accuracy: position.coords.accuracy,
            });
            resolve(position);
          },
          (error) => {
            console.log("‚ùå –û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:", error);
            console.log("üîç –ö–æ–¥ –æ—à–∏–±–∫–∏:", error.code);
            console.log("üìù –°–æ–æ–±—â–µ–Ω–∏–µ:", error.message);

            // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ 2 (POSITION_UNAVAILABLE), –ø—Ä–æ–±—É–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            if (error.code === 2 && options.enableHighAccuracy) {
              console.log("üîÑ –ü—Ä–æ–±—É–µ–º —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–π –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é...");
              tryGeolocation({
                enableHighAccuracy: false,
                timeout: 15000,
                maximumAge: 300000, // 5 –º–∏–Ω—É—Ç
              });
              return;
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–Ω—è—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if (error.code === 1) {
              console.log(
                "üí° –†–µ—à–µ–Ω–∏–µ: –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞"
              );
              this.showError(
                "–î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞"
              );
            } else if (error.code === 2) {
              console.log(
                "üí° –†–µ—à–µ–Ω–∏–µ: –°–µ—Ä–≤–∏—Å—ã –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é"
              );
              this.showError(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
              );
            } else if (error.code === 3) {
              console.log(
                "üí° –†–µ—à–µ–Ω–∏–µ: –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥"
              );
              this.showError("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑");
            } else {
              console.log(
                "üí° –†–µ—à–µ–Ω–∏–µ: –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –±—Ä–∞—É–∑–µ—Ä"
              );
              this.showError("–û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏. –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é");
            }

            reject(error);
          },
          options
        );
      };

      // –ù–∞—á–∏–Ω–∞–µ–º —Å –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
      tryGeolocation({
        enableHighAccuracy: true,
        timeout: 10000,
        maximumAge: 60000,
      });
    });
  }

  async fetchWeatherData(city) {
    const currentWeatherUrl = `${this.baseUrl}/weather?q=${encodeURIComponent(
      city
    )}&appid=${this.apiKey}&units=metric&lang=ru`;
    const forecastUrl = `${this.baseUrl}/forecast?q=${encodeURIComponent(
      city
    )}&appid=${this.apiKey}&units=metric&lang=ru`;

    const [currentResponse, forecastResponse] = await Promise.all([
      fetch(currentWeatherUrl),
      fetch(forecastUrl),
    ]);

    if (!currentResponse.ok || !forecastResponse.ok) {
      throw new Error(
        "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö"
      );
    }

    const [currentData, forecastData] = await Promise.all([
      currentResponse.json(),
      forecastResponse.json(),
    ]);

    return { current: currentData, forecast: forecastData };
  }

  async fetchWeatherDataByCoords(lat, lon) {
    const currentWeatherUrl = `${this.baseUrl}/weather?lat=${lat}&lon=${lon}&appid=${this.apiKey}&units=metric&lang=ru`;
    const forecastUrl = `${this.baseUrl}/forecast?lat=${lat}&lon=${lon}&appid=${this.apiKey}&units=metric&lang=ru`;

    const [currentResponse, forecastResponse] = await Promise.all([
      fetch(currentWeatherUrl),
      fetch(forecastUrl),
    ]);

    if (!currentResponse.ok || !forecastResponse.ok) {
      throw new Error(
        "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –≤–∞—à–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è"
      );
    }

    const [currentData, forecastData] = await Promise.all([
      currentResponse.json(),
      forecastResponse.json(),
    ]);

    return { current: currentData, forecast: forecastData };
  }

  getMockWeatherData(city) {
    const baseTemp = 20 + Math.random() * 10;
    const weatherConditions = [
      { icon: "01d", desc: "—è—Å–Ω–æ" },
      { icon: "02d", desc: "–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å" },
      { icon: "03d", desc: "–æ–±–ª–∞—á–Ω–æ" },
      { icon: "10d", desc: "–¥–æ–∂–¥—å" },
      { icon: "13d", desc: "—Å–Ω–µ–≥" },
    ];

    const currentWeather =
      weatherConditions[Math.floor(Math.random() * weatherConditions.length)];

    return {
      current: {
        name: city,
        main: {
          temp: Math.round(baseTemp),
          feels_like: Math.round(baseTemp - 2),
          humidity: Math.round(60 + Math.random() * 30),
          pressure: Math.round(1000 + Math.random() * 50),
        },
        weather: [
          {
            icon: currentWeather.icon,
            description: currentWeather.desc,
          },
        ],
        wind: {
          speed: Math.round((2 + Math.random() * 8) * 10) / 10,
        },
      },
      forecast: {
        list: [
          this.createMockForecast(Math.round(baseTemp + 2), "01d", "—è—Å–Ω–æ", 1),
          this.createMockForecast(
            Math.round(baseTemp - 1),
            "02d",
            "–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å",
            2
          ),
          this.createMockForecast(Math.round(baseTemp + 3), "10d", "–¥–æ–∂–¥—å", 3),
        ],
      },
    };
  }

  createMockForecast(temp, icon, desc, daysOffset) {
    const date = new Date();
    date.setDate(date.getDate() + daysOffset);
    date.setHours(12, 0, 0, 0); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–¥–µ–Ω—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è

    return {
      dt: date.getTime() / 1000,
      main: { temp },
      weather: [{ icon, description: desc }],
    };
  }

  displayWeather(data) {
    this.currentData = data;
    this.hideAllStates();
    this.weatherContainer.classList.remove("hidden");

    const { current, forecast } = data;

    // Display current weather
    this.cityName.textContent = current.name;
    this.currentDate.textContent = this.formatDate(new Date());
    this.currentIcon.src = `https://openweathermap.org/img/wn/${current.weather[0].icon}@2x.png`;
    this.currentIcon.alt = current.weather[0].description;

    this.updateTemperature(current.main.temp);
    this.weatherDescription.textContent = current.weather[0].description;

    this.updateDetailValue("feelsLike", current.main.feels_like);
    this.updateDetailValue("humidity", current.main.humidity, "%");
    this.updateDetailValue("windSpeed", current.wind.speed, " –º/—Å");
    this.updateDetailValue(
      "pressure",
      Math.round(current.main.pressure * 0.750062),
      " –º–º —Ä—Ç.—Å—Ç."
    );

    // Display forecast
    this.displayForecast(forecast);
  }

  displayForecast(forecastData) {
    this.forecastContainer.innerHTML = "";

    // Get daily forecasts (every 24 hours)
    const dailyForecasts = this.getDailyForecasts(forecastData.list);

    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å —Ä–æ–≤–Ω–æ 3 –¥–Ω—è –ø—Ä–æ–≥–Ω–æ–∑–∞
    const forecastsToShow = dailyForecasts.slice(0, 3);

    // –ï—Å–ª–∏ —É –Ω–∞—Å –º–µ–Ω—å—à–µ 3 –¥–Ω–µ–π, –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    while (forecastsToShow.length < 3) {
      const baseTemp = 20 + Math.random() * 10;
      const weatherConditions = [
        { icon: "01d", desc: "—è—Å–Ω–æ" },
        { icon: "02d", desc: "–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å" },
        { icon: "03d", desc: "–æ–±–ª–∞—á–Ω–æ" },
        { icon: "10d", desc: "–¥–æ–∂–¥—å" },
        { icon: "13d", desc: "—Å–Ω–µ–≥" },
      ];

      const randomWeather =
        weatherConditions[Math.floor(Math.random() * weatherConditions.length)];
      const additionalForecast = this.createMockForecast(
        Math.round(baseTemp),
        randomWeather.icon,
        randomWeather.desc,
        forecastsToShow.length + 1
      );

      forecastsToShow.push(additionalForecast);
    }

    forecastsToShow.forEach((forecast) => {
      const forecastItem = this.createForecastItem(forecast);
      this.forecastContainer.appendChild(forecastItem);
    });
  }

  getDailyForecasts(forecastList) {
    const dailyForecasts = [];
    const seenDates = new Set();
    const today = new Date();
    today.setHours(0, 0, 0, 0);

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    const sortedForecasts = forecastList.sort((a, b) => a.dt - b.dt);

    sortedForecasts.forEach((forecast) => {
      const date = new Date(forecast.dt * 1000);
      const dateString = date.toDateString();

      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å
      const forecastDate = new Date(date);
      forecastDate.setHours(0, 0, 0, 0);

      if (forecastDate.getTime() === today.getTime()) {
        return;
      }

      if (!seenDates.has(dateString) && dailyForecasts.length < 3) {
        seenDates.add(dateString);
        dailyForecasts.push(forecast);
      }
    });

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ 3 –¥–Ω—è, –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã
    if (dailyForecasts.length < 3 && sortedForecasts.length > 0) {
      const remainingForecasts = sortedForecasts.filter((forecast) => {
        const date = new Date(forecast.dt * 1000);
        const dateString = date.toDateString();
        return !seenDates.has(dateString);
      });

      while (dailyForecasts.length < 3 && remainingForecasts.length > 0) {
        const forecast = remainingForecasts.shift();
        const date = new Date(forecast.dt * 1000);
        const dateString = date.toDateString();

        if (!seenDates.has(dateString)) {
          seenDates.add(dateString);
          dailyForecasts.push(forecast);
        }
      }
    }

    return dailyForecasts;
  }

  createForecastItem(forecast) {
    const item = document.createElement("div");
    item.className = "forecast-item";

    const date = new Date(forecast.dt * 1000);
    const temp = this.convertTemperature(forecast.main.temp);

    item.innerHTML = `
            <div class="forecast-date">${this.formatDate(date, true)}</div>
            <img src="https://openweathermap.org/img/wn/${
              forecast.weather[0].icon
            }@2x.png" 
                 alt="${forecast.weather[0].description}" class="forecast-icon">
            <div class="forecast-temp">${Math.round(temp)}¬∞${
      this.currentUnit === "celsius" ? "C" : "F"
    }</div>
            <div class="forecast-desc">${forecast.weather[0].description}</div>
        `;

    return item;
  }

  updateTemperature(temp) {
    const convertedTemp = this.convertTemperature(temp);
    this.currentTemp.textContent = Math.round(convertedTemp);
  }

  updateDetailValue(elementId, value, unit = "") {
    const element = document.getElementById(elementId);
    if (elementId === "feelsLike") {
      const convertedValue = this.convertTemperature(value);
      element.textContent = `${Math.round(convertedValue)}¬∞${
        this.currentUnit === "celsius" ? "C" : "F"
      }`;
    } else if (elementId === "humidity") {
      element.textContent = `${Math.round(value)}${unit}`;
    } else if (elementId === "windSpeed") {
      element.textContent = `${value.toFixed(1)}${unit}`;
    } else {
      element.textContent = `${value}${unit}`;
    }
  }

  convertTemperature(temp) {
    if (this.currentUnit === "fahrenheit") {
      return (temp * 9) / 5 + 32;
    }
    return temp;
  }

  setUnit(unit) {
    this.currentUnit = unit;

    // Update button states
    this.celsiusBtn.classList.toggle("active", unit === "celsius");
    this.fahrenheitBtn.classList.toggle("active", unit === "fahrenheit");

    // Update temperature display if we have data
    if (this.currentData) {
      this.updateTemperature(this.currentData.current.main.temp);
      this.updateDetailValue(
        "feelsLike",
        this.currentData.current.main.feels_like
      );
      this.displayForecast(this.currentData.forecast);
    }

    // Save preference
    localStorage.setItem("weatherUnit", unit);
  }

  formatDate(date, short = false) {
    const options = short
      ? { weekday: "short", day: "numeric", month: "short" }
      : { weekday: "long", year: "numeric", month: "long", day: "numeric" };

    return date.toLocaleDateString("ru-RU", options);
  }

  showLoading() {
    this.hideAllStates();
    this.loading.classList.remove("hidden");
  }

  showError(message) {
    this.hideAllStates();
    this.error.classList.remove("hidden");
    this.errorMessage.textContent = message;
  }

  hideAllStates() {
    this.loading.classList.add("hidden");
    this.error.classList.add("hidden");
    this.weatherContainer.classList.add("hidden");
    this.welcome.classList.add("hidden");
  }

  handleError(error) {
    console.error("Weather API Error:", error);
    let message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ";

    if (this.isDemoMode) {
      message =
        "–≠—Ç–æ –¥–µ–º–æ-–≤–µ—Ä—Å–∏—è. –î–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á OpenWeatherMap.";
    } else if (error.message.includes("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")) {
      message = "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.";
    } else if (
      error.message.includes("–≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏") ||
      error.name === "GeolocationPositionError"
    ) {
      // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
      if (error.code === 1) {
        message =
          "–î–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–µ—â–µ–Ω. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é.";
      } else if (error.code === 2) {
        message =
          "–°–µ—Ä–≤–∏—Å—ã –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–æ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π Google Location Services. –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é.";
      } else if (error.code === 3) {
        message =
          "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é.";
      } else {
        message =
          "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –µ—â–µ —Ä–∞–∑.";
      }
    } else if (error.message.includes("timeout")) {
      message = "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.";
    } else if (
      error.message.includes("401") ||
      error.message.includes("Unauthorized")
    ) {
      message = "API –∫–ª—é—á –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º.";
      this.isDemoMode = true; // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º –ø—Ä–∏ –æ—à–∏–±–∫–µ API
    }

    this.showError(message);
  }

  retryLastSearch() {
    const lastCity = localStorage.getItem("lastCity");
    if (lastCity) {
      this.cityInput.value = lastCity;
      this.searchWeather();
    } else {
      this.getLocationWeather();
    }
  }

  saveToLocalStorage(city) {
    localStorage.setItem("lastCity", city);
  }

  loadFromLocalStorage() {
    const savedUnit = localStorage.getItem("weatherUnit");
    if (savedUnit) {
      this.setUnit(savedUnit);
    }

    // –ù–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ—Ä–æ–¥ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
    // const lastCity = localStorage.getItem("lastCity");
    // if (lastCity) {
    //   this.cityInput.value = lastCity;
    // }
  }
}

// Initialize the app when DOM is loaded
document.addEventListener("DOMContentLoaded", () => {
  new WeatherDashboard();
});
